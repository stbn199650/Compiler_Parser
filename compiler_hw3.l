/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { return ADD; }
"-" 	{ return SUB; }
"*" 	{ return MUL; }
"/" 	{ return DIV; }
"%"     { return MOD; }
"++"    { return INC; }
"--"    { return DEC; }

 /* Relational */
">"		{ return MT; }
"<"		{ return LT; }
">="	{ return MTE; }
"<="	{ return LTE; }
"=="	{ return EQ; }
"!="	{ return NE; }

 /* Assignment */
"="		{ return ASGN; }
"+="	{ return ADDASGN; }
"-="	{ return SUBASGN; }
"*="	{ return MULASGN; }
"/="	{ return DIVASGN; }
"%="	{ return MODASGN; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }
"!"		{ return NOT; }

 /* Delimiters */
"("		{ return LB; }
")"		{ return RB; }
"{"		{ return LCB; }
"}"		{ return RCB; }

 /* Print Keywords */	
"print"		{ return PRINT; }
"println"	{ return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }

 /* Declaration Keywords */
"var"		{ return VAR; }
"void"		{ /*yylval.rule_type.type = VOID_t;*/ return VOID; }
"int"		{ /*yylval.rule_type.type = i_val;*/ return INT; }
"float32"	{ /*yylval.rule_type.type = FLOAT_t;*/ return FLOAT; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; /*return QUOTA;*/ }
<STRING_STATE>\"		{ BEGIN INITIAL; /*return QUOTA;*/ }
<STRING_STATE>[^"]*		{
                            //yylval.rule_type.type = string_val;
                            //yylval.rule_type.string = strdup(yytext);
							strcpy(yylval.str_val, yytext);
                            return STRING;
                        }
						
 /* Variable ID */
 {id}       { /*yylval.rule_type.id = strdup(yytext);*/ 
				strcpy(yylval.str_val, yytext); return ID; }

 /* Number Constant */
{integer}	{ /*yylval.rule_type.f_val = atof(yytext);*/
				yylval.int_val = atof(yytext); return NUMBER; }
{double}	{ yylval.float_val = atof(yytext); return FLOATNUM; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ ; }
<COMMENT>\n			{ ; }
<COMMENT>"*"		{ ; }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ ; }

 /* others */

[\n]		{ return NEWLINE; }
[ \t]		{;} /* Ignore */
[^; \t] 	{;} /* Ignore other charactor sets */
<<EOF>>     { static int once = 0; return once++ ? 0 : NEWLINE; }

%%

int yywrap()
{
    return 1;
}
